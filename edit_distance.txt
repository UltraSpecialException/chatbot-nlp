{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;}
\margl1440\margr1440\vieww19360\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\i\fs24 \cf2 # alphabet = "abcdefghijklmnopqrstuvwxyz"\
#\
# substitution_weight_matrix = [\
#     [0, 5, 3, 2, 2, 3, 4, 5, 7, 6, 7, 8, 7, 6, 8, 9, 1, 3, 1, 4, 6, 4, 1, 2, 5, 1],\
#     [5, 0, 2, 3, 4, 1.5, 1, 1, 3, 1.5, 3, 4, 2, 1, 4, 5, 6, 3, 4, 2, 2, 1, 5, 3, 2, 4],\
#     [3, 2, 0, 1, 2, 1, 1.5, 3, 5, 4, 5, 6, 4, 3, 6, 7, 4, 2, 1.5, 2, 4, 1, 3, 1, 3, 2],\
#     [2, 3, 1, 0, 1, 1, 2, 3, 5, 4, 5, 6, 5, 4, 6, 7, 3, 1, 1, 1.5, 4, 1.5, 1.5, 1, 3, 2],\
#     [2, 4, 2, 1, 0, 1.5, 3, 4, 5, 5, 6, 7, 6, 5, 6, 7, 2, 1, 1, 2, 4, 3, 1, 2, 3, 2],\
#     [3, 1.5, 1, 1, 1.5, 0, 1, 2, 4, 3, 4, 5, 5, 3, 5, 6, 4, 1, 2, 1, 3, 1, 3, 2, 2, 3],\
#     [4, 1, 1.5, 2, 3, 1, 0, 1, 2, 2, 3, 4, 3, 2, 4, 5, 5, 1.5, 3, 1, 2, 1, 4, 3, 1, 4],\
#     [5, 1, 3, 3, 4, 2, 1, 0, 2, 1, 2, 3, 2, 1, 3, 4, 6, 3, 4, 1.5, 1, 2, 5, 4, 1, 5],\
#     [7, 3, 5, 5, 5, 4, 2, 2, 0, 1, 1, 1.5, 2, 2, 1, 2, 7, 4, 7, 3, 1, 5, 6, 6, 2, 7],\
#     [6, 1.5, 4, 4, 5, 3, 2, 1, 1, 0, 1, 2, 1, 1, 2, 3, 7, 4, 5, 3, 1, 3, 6, 5, 1.5, 6],\
#     [7, 3, 5, 5, 6, 4, 3, 2, 1, 1, 0, 1, 1, 2, 1, 2, 8, 5, 6, 4, 1.5, 4, 7, 6, 3, 7],\
#     [8, 4, 6, 6, 7, 5, 4, 3, 1.5, 2, 1, 0, 1, 3, 1, 1, 9, 6, 7, 5, 3, 5, 8, 7, 4, 8],\
#     [7, 2, 4, 5, 6, 5, 3, 2, 2, 1, 1, 1, 0, 1, 2, 3, 8, 5, 6, 4, 2, 3, 7, 5, 3, 6],\
#     [6, 1, 3, 4, 5, 3, 2, 1, 2, 1, 2, 3, 1, 0, 3, 4, 7, 4, 5, 3, 2, 2, 6, 4, 2, 5],\
#     [8, 4, 6, 6, 6, 5, 4, 3, 1, 2, 1, 1, 2, 3, 0, 1, 8, 5, 7, 4, 2, 5, 7, 7, 3, 8],\
#     [9, 5, 7, 7, 7, 6, 5, 4, 2, 3, 2, 1, 3, 4, 1, 0, 9, 6, 8, 5, 3, 6, 8, 8, 4, 9],\
#     [1, 6, 4, 3, 2, 4, 5, 6, 7, 7, 8, 9, 8, 7, 8, 9, 0, 3, 1.5, 4, 6, 5, 1, 3, 5, 2],\
#     [3, 3, 2, 1, 1, 1, 1.5, 3, 4, 4, 5, 6, 5, 4, 5, 6, 3, 0, 2, 1, 3, 2, 2, 2, 2, 3],\
#     [1, 4, 1.5, 1, 1, 2, 3, 4, 7, 5, 6, 7, 6, 5, 7, 8, 1.5, 2, 0, 3, 6, 3, 1, 1, 4, 1],\
#     [4, 2, 2, 1.5, 2, 1, 1, 1.5, 3, 3, 4, 5, 4, 3, 4, 5, 4, 1, 3, 0, 2, 2, 3, 3, 1, 4],\
#     [6, 2, 4, 4, 4, 3, 2, 1, 1, 1, 1.5, 3, 2, 2, 2, 3, 6, 3, 6, 2, 0, 3, 5, 5, 1, 6],\
#     [4, 1, 1, 1.5, 3, 1, 1, 2, 5, 3, 4, 5, 3, 2, 5, 6, 5, 2, 3, 2, 3, 0, 4, 2, 2, 3],\
#     [1, 5, 3, 1.5, 1, 3, 4, 5, 6, 6, 7, 8, 7, 6, 7, 8, 1, 2, 1, 3, 5, 4, 0, 2, 4, 2],\
#     [2, 3, 1, 1, 2, 2, 3, 4, 6, 5, 6, 7, 5, 4, 7, 8, 3, 2, 1, 3, 5, 2, 2, 0, 4, 1],\
#     [5, 2, 3, 3, 3, 2, 1, 1, 2, 1.5, 3, 4, 3, 2, 3, 4, 5, 2, 4, 1, 1, 2, 4, 4, 0, 5],\
#     [1, 4, 2, 2, 2, 3, 4, 5, 7, 6, 7, 8, 6, 5, 8, 9, 2, 3, 1, 4, 6, 3, 2, 1, 5, 0],\
#                              ]\
#\
#\
# def measure_distance(s1: str, s2: str) -> float:\
#     """\
#     Returns the editing distance between s1 and s2.\
#     """\
#     # D[i][0] = i and D[0][j] = j\
#     distance_matrix = [[i for i in range(len(s2) + 1)]] + \\\
#                       [[j] + [0 for _ in range(len(s2))] for j in range(1, len(s1) + 1)]\
#\
#     for n in range(1, len(s1)):\
#         for m in range(1, len(s2)):\
#             print("n, m: ", n, m)\
#             # print("s1[n], s2[m]: ", s1[n], s2[m])\
#             # print("Matrix at [n - 1]: ", distance_matrix[n - 1])\
#             distance_matrix[n][m] = min(\
#                 distance_matrix[n - 1][m] + 1,\
#                 distance_matrix[n][m - 1] + 1,\
#                 distance_matrix[n - 1][m - 1] + substitution_weight_matrix[alphabet.index(s1[n])][alphabet.index(s2[m])]\
#             )\
#             print(distance_matrix[n][m])\
#\
#     return distance_matrix[len(s1) - 1][len(s2) - 1]\
}